name: 'Terraform - Update Sysdig Rules'

on:
  push:
    branches: [ "main" ]
    paths:
        - terraform_method/**
env:
 # verbosity setting for Terraform logs
 TF_LOG: INFO
 # Credentials for deployment to Sysdig Secure
 TF_VAR_sysdig_secure_api_token : ${{ secrets.SECURE_API_TOKEN }}

   
permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file 
    - name: Setup Terraform with Terraform cloud state
      uses: hashicorp/setup-terraform@v1
      with:
       terraform_version: 1.3.5
       cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}


    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init with Sysdig Provider
      working-directory: ./terraform_method
      run: terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: ./terraform_method
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply Policies and Rules 
      working-directory: ./terraform_method
      run: terraform apply -auto-approve -input=false
      env:
         # verbosity setting for Terraform logs
        TF_LOG: INFO
        # Credentials for deployment to Sysdig Secure
        TF_VAR_sysdig_secure_api_token : ${{ secrets.SECURE_API_TOKEN }}